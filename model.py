# -*- coding: utf-8 -*-
"""model.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13cCpvvP1noNLNLhzA7bwmJCjM3HWTCqD

## XGBoost Regression Model

Importing  Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import pickle

"""## Importing the Dataset and Cleaning it(Filling null with mean value )"""

df=pd.read_csv("Train.csv")
df.corr()

"""## Dropping Columns having negative correlation value with respect to Item Outlet sales"""

df.drop(inplace=True,columns=["Outlet_Establishment_Year","Item_Visibility"])
df["Item_Weight"].replace(np.nan,df["Item_Weight"].mean(),inplace=True)
df.dropna(inplace=True,subset=["Outlet_Size"])

"""## Changing variations of categorical features in Item fat content to a general form"""

df["Item_Fat_Content"].replace("reg","Regular",inplace=True)
df["Item_Fat_Content"].replace("LF","Low Fat",inplace=True)
df["Item_Fat_Content"].replace("low fat","Low Fat",inplace=True)
df.drop(inplace=True,columns=["Outlet_Identifier","Item_Identifier","Item_Type","Outlet_Type"])

"""## Label Encoding Categorical values"""

# Import label encoder 
from sklearn import preprocessing 

# label_encoder object knows how to understand word labels. 
label_encoder = preprocessing.LabelEncoder() 

# Encode labels in column 'species'. 
df['Item_Fat_Content']= label_encoder.fit_transform(df['Item_Fat_Content']) 
#df['Outlet_Type']= label_encoder.fit_transform(df['Outlet_Type'])
df['Outlet_Location_Type']= label_encoder.fit_transform(df['Outlet_Location_Type'])
df['Outlet_Size']= label_encoder.fit_transform(df['Outlet_Size'])

x=df.iloc[:,:-1].values
y=df.iloc[:,-1].values

"""## Splitting Test Set and Training set"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.1, random_state = 0)

"""# Creating XGBoost Regression Model"""

from xgboost import XGBRegressor
regressor = XGBRegressor()
regressor.fit(x_train, y_train)
regressor.score(x_test,y_test)

#Saving model to disk
pickle.dump(regressor,open("model.pkl",'wb'))

v=np.array([[12.4,1.5,123.6,1,0]])
# Loading model to compare the results
model = pickle.load(open('model.pkl','rb'))
print(model.predict(v))